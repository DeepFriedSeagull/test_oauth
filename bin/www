#!/usr/bin/env node

"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('oauthest2:server');
var http = require('http');

/*
var cookieParser = require('cookie-parser'); // Read/Write cookies
var expressSession = require('express-session'); // Sessions 
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


io.use(function (socket, next) {
	var req = socket.handshake;
	var res = {};
	app.cookieParser(req, res, function (err) {
		if (err) {
			return next(err);
		}
		app.sessionStore(req, res, next);
	});
});


io.use(function (socket, next) {
	var req = socket.handshake;
	var res = {};

	app.passport.initialize()(req, res, function (err) {
		if (err) {
			return next(err);
		}

		return next();
	});
});

io.use(function (socket, next) {
	var req = socket.handshake;
	var res = {};

	app.passport.session()(req, res, function (err) {
		if (err) {
			return next(err);
		}

		return next();
	});
});


// // TODO
// io.use(function (socket, next) {

// 	var req = socket.handshake;
// 	if (req.isAuthenticated()) {
// 		return next();
// 	}
// 	// if the user is not authenticated then redirect him to the login page
// 	//res.redirect('/');
// 	// TODO
// });


// General Namespace
io.on('connection', function (socket) {
	console.log('io: a user connected');

	//socket.broadcast.emit('chat message', 'Neauveau Utilisateur Connecté');

	// socket.on('chat message', function (msg) {
	// 	console.log('message: ' + msg);
	// });
	// socket.on('disconnect', function () {
	// 	console.log('user disconnected');
	// 	socket.broadcast.emit('chat message', 'Utilisateur Déconnecté');

	// });
	socket.on('chat message', function (msg) {
		socket.broadcast.emit('chat message', 'From ' + socket.handshake.user.displayname + ': ' + msg);
	});
});

var nsp = io.of('/my-namespace');
nsp.on('connection', function (socket) {
	console.log('someone connected');
	socket.on('connectionLoby', function (msg) {
		socket.broadcast.emit('chat message', 'eee');
	});
});
nsp.emit('hi', 'everyone!');

/*
//connectionNamespace
io.of('/connectionNamespace').on('connection', function (socket) {
	console.log('io:connectionNamespace a user connected');
	socket.broadcast.emit('chat message', 'User ' + socket.handshake.user.displayname + ' *connected* ');
	socket.on('disconnect', function () {
		console.log('user disconnected');
		socket.broadcast.emit('chat message', 'User ' + socket.handshake.user.displayname + ' *disconnected* ');
	});

});
*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
